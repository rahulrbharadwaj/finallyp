/* Generated by Yosys 0.16+34 (git sha1 36b5caf82, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os) */

(* src = "shiftr.v:22.1-42.10" *)
module dff(d, clk, res, q, qb);
  (* src = "shiftr.v:39.6-39.8" *)
  wire _0_;
  (* src = "shiftr.v:24.11-24.14" *)
  input clk;
  wire clk;
  (* src = "shiftr.v:23.11-23.12" *)
  input d;
  wire d;
  (* src = "shiftr.v:26.16-26.17" *)
  output q;
  reg q;
  (* src = "shiftr.v:27.16-27.18" *)
  output qb;
  reg qb;
  (* src = "shiftr.v:25.11-25.14" *)
  input res;
  wire res;
  assign _0_ = ~d;
  (* src = "shiftr.v:29.5-41.4" *)
  always @(posedge clk)
    if (res) q <= 1'h0;
    else q <= d;
  (* src = "shiftr.v:29.5-41.4" *)
  always @(posedge clk)
    if (res) qb <= 1'h1;
    else qb <= _0_;
endmodule

(* src = "shiftr.v:44.1-72.10" *)
module shiftr(outp, outn, clock, clc, creset);
  (* src = "shiftr.v:48.18-48.21" *)
  output [9:0] clc;
  wire [9:0] clc;
  (* src = "shiftr.v:54.16-54.20" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9" *)
  wire [9:0] clcb;
  (* src = "shiftr.v:53.10-53.14" *)
  wire clks;
  (* src = "shiftr.v:47.11-47.16" *)
  input clock;
  wire clock;
  (* src = "shiftr.v:49.12-49.18" *)
  output creset;
  wire creset;
  (* src = "shiftr.v:55.10-55.16" *)
  (* unused_bits = "0" *)
  wire dclock;
  (* src = "shiftr.v:51.10-51.16" *)
  wire dvalid;
  (* src = "shiftr.v:46.11-46.15" *)
  input outn;
  wire outn;
  (* src = "shiftr.v:45.11-45.15" *)
  input outp;
  wire outp;
  (* src = "shiftr.v:52.10-52.15" *)
  wire valid;
  assign valid = outn ^ outp;
  assign creset = valid | clc[9];
  (* module_not_derived = 32'd1 *)
  (* src = "shiftr.v:60.9-60.66" *)
  dff U1 (
    .clk(valid),
    .d(1'h1),
    .q(clc[0]),
    .qb(clcb[0]),
    .res(1'h0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shiftr.v:69.9-69.72" *)
  dff U10 (
    .clk(valid),
    .d(clc[8]),
    .q(clc[9]),
    .qb(clcb[9]),
    .res(1'h0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shiftr.v:61.9-61.71" *)
  dff U2 (
    .clk(valid),
    .d(clc[0]),
    .q(clc[1]),
    .qb(clcb[1]),
    .res(1'h0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shiftr.v:62.9-62.71" *)
  dff U3 (
    .clk(valid),
    .d(clc[1]),
    .q(clc[2]),
    .qb(clcb[2]),
    .res(1'h0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shiftr.v:63.9-63.71" *)
  dff U4 (
    .clk(valid),
    .d(clc[2]),
    .q(clc[3]),
    .qb(clcb[3]),
    .res(1'h0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shiftr.v:64.9-64.71" *)
  dff U5 (
    .clk(valid),
    .d(clc[3]),
    .q(clc[4]),
    .qb(clcb[4]),
    .res(1'h0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shiftr.v:65.9-65.71" *)
  dff U6 (
    .clk(valid),
    .d(clc[4]),
    .q(clc[5]),
    .qb(clcb[5]),
    .res(1'h0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shiftr.v:66.9-66.71" *)
  dff U7 (
    .clk(valid),
    .d(clc[5]),
    .q(clc[6]),
    .qb(clcb[6]),
    .res(1'h0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shiftr.v:67.9-67.71" *)
  dff U8 (
    .clk(valid),
    .d(clc[6]),
    .q(clc[7]),
    .qb(clcb[7]),
    .res(1'h0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shiftr.v:68.9-68.71" *)
  dff U9 (
    .clk(valid),
    .d(clc[7]),
    .q(clc[8]),
    .qb(clcb[8]),
    .res(1'h0)
  );
  assign clks = 1'h0;
  assign dclock = clock;
  assign dvalid = valid;
endmodule
